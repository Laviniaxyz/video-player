{"version":3,"sources":["video/Kamua.mp4","images/play_arrow_white.svg","images/pause_white.svg","components/VideoItem/VideoItem.js","App.js","reportWebVitals.js","index.js"],"names":["VideoItem","isPlaying","setIsPlaying","isMuted","setIsMuted","openedSettings","setOpenedSettings","videoRef","useRef","progressRef","useState","progress","setProgress","progressVolume","setProgressVolume","timestamp","setTimestamp","togglePlay","current","paused","play","pause","toggleVolume","volume","useEffect","timer","setInterval","currentTime","duration","console","log","minutes","Math","floor","String","seconds","clearInterval","className","Card","onClick","CardActionArea","CardMedia","ref","component","autoPlay","loop","type","src","VideoKamua","PauseImage","PlayImage","Box","display","alignItems","width","mr","LinearProgress","getAttribute","variant","value","requestFullscreen","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.23bea933.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/Kamua.05a70e49.mp4\";","export default __webpack_public_path__ + \"static/media/play_arrow_white.2df57c2f.svg\";","export default __webpack_public_path__ + \"static/media/pause_white.11aad2d7.svg\";","import {useRef, useState, useEffect} from 'react'\r\nimport './VideoItem.scss'\r\n\r\nimport VideoKamua from '../../video/Kamua.mp4'\r\nimport PlayImage from '../../images/play_arrow_white.svg'\r\nimport PauseImage from '../../images/pause_white.svg'\r\n\r\nimport Card from '@material-ui/core/Card';\r\nimport CardActionArea from '@material-ui/core/CardActionArea';\r\nimport CardMedia from '@material-ui/core/CardMedia';\r\nimport Box from '@material-ui/core/Box';\r\n\r\n\r\nimport PlayArrow from '@material-ui/icons/PlayArrow'\r\nimport VolumeUp from '@material-ui/icons/VolumeUp'\r\nimport VolumeOffIcon from '@material-ui/icons/VolumeOff';\r\nimport Settings from '@material-ui/icons/Settings'\r\nimport Fullscreen from '@material-ui/icons/Fullscreen'\r\nimport Pause from '@material-ui/icons/Pause'\r\nimport LinearProgress from '@material-ui/core/LinearProgress';\r\n\r\n\r\n\r\nconst VideoItem = ({isPlaying, setIsPlaying, isMuted, setIsMuted, openedSettings, setOpenedSettings}) => {\r\n  \r\n  const videoRef = useRef(null)\r\n  const progressRef = useRef()\r\n  const [progress, setProgress] = useState(0)\r\n  const [progressVolume, setProgressVolume] = useState(100)\r\n  const [timestamp, setTimestamp] = useState('00:00')\r\n\r\n  \r\n  \r\n\r\n  const togglePlay = () => {\r\n    if (videoRef.current.paused) {\r\n      videoRef.current.play()\r\n      setIsPlaying(true)\r\n    } else {\r\n      videoRef.current.pause()\r\n      setIsPlaying(false)\r\n    }\r\n  }\r\n\r\n  const toggleSpeedNav = () => {\r\n    setOpenedSettings(!openedSettings)\r\n  }\r\n\r\n  const toggleVolume = () => {\r\n    setIsMuted(!isMuted)\r\n    if (videoRef.current.volume === 1) {\r\n        videoRef.current.volume = 0\r\n        setProgressVolume(0)\r\n    } else {\r\n      videoRef.current.volume = 1\r\n      setProgressVolume(100)\r\n    }\r\n  }\r\n\r\n  useEffect(()=> {\r\n    //Displaying progress and timestamp\r\n    if (isPlaying) {\r\n      \r\n      const timer = setInterval(()=> {\r\n        setProgress((videoRef.current.currentTime / videoRef.current.duration) *100)\r\n         console.log(videoRef.current.currentTime, 'currTme')\r\n\r\n         //Calculate timestamp\r\n         let minutes = Math.floor(videoRef.current.currentTime / 60);\r\n          if (minutes <10) {\r\n            minutes = '0' + String(minutes);\r\n          }\r\n\r\n          let seconds = Math.floor(videoRef.current.currentTime%60);\r\n          if (seconds < 10) {\r\n            seconds = '0' + String(seconds);\r\n          }\r\n          setTimestamp(`${minutes}:${seconds}`)\r\n      }, [500])\r\n      \r\n      return () => {\r\n        clearInterval(timer);\r\n      };\r\n    }\r\n  }, [progress, isPlaying])\r\n\r\n  const setCurrentValue = () => {\r\n    console.log(progressRef.current.getAttribute('value'), 'currentValue') \r\n    \r\n  }\r\n\r\n  const toggleFullScreen =  () => {\r\n    videoRef.current.requestFullscreen()\r\n  } \r\n\r\n  \r\n\r\n  return(\r\n      <div className='vp-container'>\r\n        {/* VIDEO */}\r\n        <div className='video' >\r\n          <Card onClick={togglePlay}>\r\n            <CardActionArea>\r\n              <CardMedia \r\n                ref={videoRef}\r\n                component=\"video\"\r\n                autoPlay \r\n                loop \r\n                type='video/mp4' \r\n                src={VideoKamua}\r\n                />\r\n            </CardActionArea>\r\n          </Card>\r\n          <div className='image'>\r\n           {isPlaying? <img src={PauseImage}/> : <img src={PlayImage}/>}\r\n          </div>\r\n          {openedSettings?\r\n          (\r\n            <div className='speed'>\r\n            <div className='speed-title'>Playback Speed</div>\r\n            <div>0.5</div>\r\n            <div>0.75</div>\r\n            <div>Normal</div>\r\n            <div>1.25</div>\r\n            <div>1.5</div>\r\n          </div>\r\n          )\r\n        :\r\n        null }\r\n        </div>\r\n        {/* PROGRESS BAR */}\r\n        <div className='progress-bar'>\r\n          <div>{timestamp}</div>\r\n          <Box display=\"flex\" alignItems=\"center\">\r\n            <Box width=\"100%\"  mr={1}>\r\n              <LinearProgress\r\n                onClick={setCurrentValue}\r\n                ref={progressRef} \r\n                variant=\"determinate\"\r\n                value={progress} \r\n                />\r\n            </Box>\r\n          </Box>\r\n        </div>\r\n        {/* CONTROLS */}\r\n        <div className='video-controls'>\r\n          <div className='controls-left'>\r\n          {isPlaying? <div onClick={togglePlay} className='volume'><Pause/></div> : <div onClick={togglePlay}><PlayArrow/></div>}\r\n          {isMuted? <div onClick = {toggleVolume}><VolumeOffIcon/></div>:  \r\n            <div onClick = {toggleVolume} className='volume'><VolumeUp/></div>\r\n          }\r\n           <div className='volumeProgress'><LinearProgress variant=\"determinate\" value={progressVolume}/></div>\r\n          </div>\r\n          <div className='controls-right'>\r\n            <div onClick={toggleSpeedNav}><Settings/></div>\r\n            <div onClick={toggleFullScreen}><Fullscreen/></div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n  )\r\n}\r\n\r\nexport default VideoItem","import {useState} from 'react'\nimport './App.scss'\nimport VideoItem from './components/VideoItem/VideoItem'\n\n\n\nconst App = () => {\n  const [isPlaying, setIsPlaying] = useState(false)\n  const [isMuted, setIsMuted] = useState(false)\n  const [openedSettings, setOpenedSettings] = useState(false) \n  console.log(isPlaying, 'isPlayingapp')\n\n  return(\n    <div className='main-screen'> \n      <h1 className='title'>Custom Video Player</h1>\n      <VideoItem isPlaying={isPlaying} isMuted={isMuted} openedSettings={openedSettings} setIsPlaying={setIsPlaying} setOpenedSettings={setOpenedSettings} setIsMuted={setIsMuted}/>\n    </div>\n  )\n}\n\n\nexport default App","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}
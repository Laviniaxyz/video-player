{"version":3,"sources":["video/Kamua.mp4","images/play_arrow_white.svg","images/pause_white.svg","components/VideoItem/VideoItem.js","App.js","reportWebVitals.js","index.js"],"names":["VideoItem","isPlaying","setIsPlaying","isMuted","setIsMuted","openedSettings","setOpenedSettings","videoRef","useRef","volumeProgressRef","videoProgressRef","useState","progress","setProgress","progressVolume","setProgressVolume","timestamp","setTimestamp","animation","setAnimation","togglePlay","setTimeout","current","paused","play","pause","toggleVolume","console","log","volume","useEffect","timer","setInterval","currentTime","duration","minutes","Math","floor","String","seconds","clearInterval","changePlaybackSpeed","num","playbackRate","className","Card","onClick","CardActionArea","CardMedia","ref","component","type","src","VideoKamua","PlayImage","PauseImage","bind","onChange","value","step","min","max","requestFullscreen","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.f34539d7.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/Kamua.05a70e49.mp4\";","export default __webpack_public_path__ + \"static/media/play_arrow_white.2df57c2f.svg\";","export default __webpack_public_path__ + \"static/media/pause_white.11aad2d7.svg\";","import {useRef, useState, useEffect} from 'react'\nimport './VideoItem.scss'\n\nimport VideoKamua from '../../video/Kamua.mp4'\nimport PlayImage from '../../images/play_arrow_white.svg'\nimport PauseImage from '../../images/pause_white.svg'\n\nimport Card from '@material-ui/core/Card';\nimport CardActionArea from '@material-ui/core/CardActionArea';\nimport CardMedia from '@material-ui/core/CardMedia';\nimport Box from '@material-ui/core/Box';\n\n\nimport PlayArrow from '@material-ui/icons/PlayArrow'\nimport VolumeUp from '@material-ui/icons/VolumeUp'\nimport VolumeOffIcon from '@material-ui/icons/VolumeOff';\nimport Settings from '@material-ui/icons/Settings'\nimport Fullscreen from '@material-ui/icons/Fullscreen'\nimport Pause from '@material-ui/icons/Pause'\nimport LinearProgress from '@material-ui/core/LinearProgress';\n\n\n\n\nconst VideoItem = ({isPlaying, setIsPlaying, isMuted, setIsMuted, openedSettings, setOpenedSettings}) => {\n  \n  const videoRef = useRef(null)\n  const volumeProgressRef = useRef()\n  const videoProgressRef = useRef()\n  const [progress, setProgress] = useState(0)\n  const [progressVolume, setProgressVolume] = useState(1)\n  const [timestamp, setTimestamp] = useState('00:00')\n  const [animation, setAnimation] = useState(false)  \n\n\n  const togglePlay = () => {\n    setAnimation(true)\n\n    setTimeout(() => {\n      setAnimation(false)\n    }, 1000);\n    if (videoRef.current.paused) {\n      videoRef.current.play()\n      setIsPlaying(true)\n    } else {\n      videoRef.current.pause()\n      setIsPlaying(false)\n    }\n    \n  }\n\n  //Toggle playback speed tab\n  const toggleSpeedNav = () => {\n    setOpenedSettings(!openedSettings)\n  }\n\n  const toggleVolume = () => {\n    setIsMuted(!isMuted)\n    console.log(videoRef.current.volume, 'volume' )\n    if (videoRef.current.volume ===  1) {\n      videoRef.current.volume = 0\n    } else {\n      videoRef.current.volume = 1\n    }\n  }\n\n  const changeVolume = () => {\n    setProgressVolume(volumeProgressRef.current.value)\n    videoRef.current.volume = volumeProgressRef.current.value\n    if (videoRef.current.volume === 0) {\n      setIsMuted(true)\n    } else {\n      setIsMuted(false)\n    }\n  }\n\n\n  useEffect(()=> {\n    //Displaying progress and timestamp\n    if (isPlaying) {\n    // console.log(videoRef.current.duration, 'duration')\n     //console.log(videoRef.current.currentTime, 'currentTime')\n      //console.log(volumeProgressRef.current.getAttribute('value'), 'currentValue') \n      const timer = setInterval(()=> {\n        setProgress((videoRef.current.currentTime / videoRef.current.duration) *100)\n         //console.log(videoRef.current.currentTime, 'currTme')\n\n         //Calculate timestamp\n         let minutes = Math.floor(videoRef.current.currentTime / 60);\n          if (minutes <10) {\n            minutes = '0' + String(minutes);\n          }\n\n          let seconds = Math.floor(videoRef.current.currentTime%60);\n          if (seconds < 10) {\n            seconds = '0' + String(seconds);\n          }\n          setTimestamp(`${minutes}:${seconds}`)\n      }, [500])\n      \n      return () => {\n        clearInterval(timer);\n      };\n    }\n  }, [progress, isPlaying])\n\n    const toggleFullScreen =  () => {\n      videoRef.current.requestFullscreen()\n    } \n\n\n  const setVideoProgress = () => {\n    console.log(videoProgressRef.current.value, 'progress value 2')\n    \n    console.log((videoProgressRef.current.value * videoRef.current.duration)/100, 'cuurent time changed')\n    \n    setProgress(videoProgressRef.current.value)\n    videoRef.current.currentTime = (videoProgressRef.current.value * videoRef.current.duration)/100\n  }\n\n\n  const changePlaybackSpeed = (num) => {\n    videoRef.current.playbackRate = num\n    setOpenedSettings(false)\n  }\n\n \n\n  return(\n      <div className='vp-container'>\n        {/* VIDEO */}\n        <div className='video' >\n          <Card onClick={togglePlay}>\n            <CardActionArea>\n              <CardMedia \n                ref={videoRef}\n                component=\"video\"\n                //autoPlay \n                //loop \n                type='video/mp4' \n                src={VideoKamua}\n                />\n            </CardActionArea>\n          </Card>\n          <div className='timestamp'>{timestamp}</div>\n          <div className={animation? 'image2' : 'image'}>\n            {isPlaying? <img src={PlayImage}/>: <img src={PauseImage}/> }\n          </div>\n\n          {openedSettings?\n          (\n            <div className='speed'>\n            <div className='speed-title'>Playback Speed</div>\n            <div onClick={changePlaybackSpeed.bind(this, 0.5)}>0.5</div>\n            <div onClick={changePlaybackSpeed.bind(this, 0.75)}>0.75</div>\n            <div onClick={changePlaybackSpeed.bind(this, 1)}>Normal</div>\n            <div onClick={changePlaybackSpeed.bind(this, 1.25)}>1.25</div>\n            <div onClick={changePlaybackSpeed.bind(this, 1.5)}>1.5</div>\n          </div>\n          )\n        :\n        null }\n         \n        </div>\n        {/* PROGRESS BAR */}\n        <div className='progress-bar'>\n          <div><input ref={videoProgressRef} type=\"range\" onChange={setVideoProgress} step=\"0.1\" min=\"0\" max=\"100\" value={progress}/></div>\n        </div>\n        {/* CONTROLS */}\n        <div className='video-controls'>\n          <div className='controls-left'>\n          {isPlaying? <div onClick={togglePlay} className='volume'><Pause/></div> : <div onClick={togglePlay}><PlayArrow/></div>}\n          {isMuted? <div onClick = {toggleVolume}><VolumeOffIcon/></div>:  \n            <div onClick = {toggleVolume} className='volume'><VolumeUp/></div>\n          }\n          <div className='volumeProgress'><input ref={volumeProgressRef} type=\"range\" onChange={changeVolume} step=\"0.05\" min=\"0\" max=\"1\" value={progressVolume}/></div>\n          </div>\n          <div className='controls-right'>\n            <div onClick={toggleSpeedNav}><Settings/></div>\n            <div onClick={toggleFullScreen}><Fullscreen/></div>\n          </div>\n        </div>\n      </div>\n  )\n}\n\nexport default VideoItem","import {useState} from 'react'\nimport './App.scss'\nimport VideoItem from './components/VideoItem/VideoItem'\n\n\n\nconst App = () => {\n  const [isPlaying, setIsPlaying] = useState(false)\n  const [isMuted, setIsMuted] = useState(false)\n  const [openedSettings, setOpenedSettings] = useState(false) \n  \n\n  return(\n    <div className='main-screen'> \n      <h1 className='title'>Custom Video Player</h1>\n      <VideoItem isPlaying={isPlaying} isMuted={isMuted} openedSettings={openedSettings} setIsPlaying={setIsPlaying} setOpenedSettings={setOpenedSettings} setIsMuted={setIsMuted}/>\n    </div>\n  )\n}\n\n\nexport default App","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}
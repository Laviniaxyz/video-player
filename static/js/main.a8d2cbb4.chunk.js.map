{"version":3,"sources":["video/Kamua.mp4","images/play_arrow_white.svg","images/pause_white.svg","components/VideoItem/VideoItem.js","App.js","reportWebVitals.js","index.js"],"names":["VideoItem","isPlaying","setIsPlaying","isMuted","setIsMuted","openedSettings","setOpenedSettings","videoRef","useRef","volumeProgressRef","videoProgressRef","useState","progress","setProgress","progressVolume","setProgressVolume","timestamp","setTimestamp","animation","setAnimation","showControls","setShowControls","mouseMoved","setMouseMoved","togglePlay","current","paused","play","pause","useEffect","timer","setTimeout","clearTimeout","changePlaybackSpeed","num","playbackRate","toggleVolume","volume","setInterval","currentTime","duration","minutes","Math","floor","String","seconds","clearInterval","toggleControls","className","onMouseMove","onClick","Card","CardActionArea","CardMedia","style","cursor","ref","component","type","src","VideoKamua","PlayImage","PauseImage","bind","onMouseOver","onChange","value","step","min","max","requestFullscreen","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.a8d2cbb4.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/Kamua.05a70e49.mp4\";","export default __webpack_public_path__ + \"static/media/play_arrow_white.2df57c2f.svg\";","export default __webpack_public_path__ + \"static/media/pause_white.11aad2d7.svg\";","import {useRef, useState, useEffect} from 'react'\nimport './VideoItem.scss'\n\nimport VideoKamua from '../../video/Kamua.mp4'\nimport PlayImage from '../../images/play_arrow_white.svg'\nimport PauseImage from '../../images/pause_white.svg'\n\nimport Card from '@material-ui/core/Card';\nimport CardActionArea from '@material-ui/core/CardActionArea';\nimport CardMedia from '@material-ui/core/CardMedia';\n\nimport PlayArrow from '@material-ui/icons/PlayArrow'\nimport VolumeUp from '@material-ui/icons/VolumeUp'\nimport VolumeOffIcon from '@material-ui/icons/VolumeOff';\nimport Settings from '@material-ui/icons/Settings'\nimport Fullscreen from '@material-ui/icons/Fullscreen'\nimport Pause from '@material-ui/icons/Pause'\n\n\n\nconst VideoItem = ({isPlaying, setIsPlaying, isMuted, setIsMuted, openedSettings, setOpenedSettings}) => {\n  \n  const videoRef = useRef(null)\n  const volumeProgressRef = useRef()\n  const videoProgressRef = useRef()\n \n\n  const [progress, setProgress] = useState(0)\n  const [progressVolume, setProgressVolume] = useState(1)\n  const [timestamp, setTimestamp] = useState('00:00')\n  const [animation, setAnimation] = useState(false)  \n  const [showControls, setShowControls] = useState(true)\n  const [mouseMoved, setMouseMoved] = useState(false)\n\n  const togglePlay = () => {\n    if (videoRef.current.paused) {\n      videoRef.current.play()\n      setIsPlaying(true)\n    } else {\n      videoRef.current.pause()\n      setIsPlaying(false)\n    }\n  }\n\n  //Display animation on video play/stop\n  useEffect(() => {\n    setAnimation(true)\n    const timer =  setTimeout(() => {\n      setAnimation(false)\n    }, 600);\n    \n    return () => { clearTimeout(timer)}\n  }, [isPlaying])\n\n  //Toggle the appearance of playback speed tab\n  const toggleSpeedNav = () => {\n    setOpenedSettings(!openedSettings)\n  }\n\n  const changePlaybackSpeed = (num) => {\n    videoRef.current.playbackRate = num\n    setOpenedSettings(false)\n  }\n\n\n  //Managing volume\n  const toggleVolume = () => {\n    setIsMuted(!isMuted)\n    if (videoRef.current.volume ===  1) {\n      videoRef.current.volume = 0\n    } else {\n      videoRef.current.volume = 1\n    }\n  }\n\n  const changeVolume = () => {\n    toggleControls()\n    setProgressVolume(volumeProgressRef.current.value)\n    videoRef.current.volume = volumeProgressRef.current.value\n    if (videoRef.current.volume === 0) {\n      setIsMuted(true)\n    } else {\n      setIsMuted(false)\n    }\n  }\n\n  //Displaying progress and timestamp\n  useEffect(()=> {\n    if (isPlaying) { \n      const timer = setInterval(()=> {\n        setProgress((videoRef.current.currentTime / videoRef.current.duration) *100)\n         //Calculate timestamp\n         let minutes = Math.floor(videoRef.current.currentTime / 60);\n          if (minutes <10) {\n            minutes = '0' + String(minutes);\n          }\n\n          let seconds = Math.floor(videoRef.current.currentTime%60);\n          if (seconds < 10) {\n            seconds = '0' + String(seconds);\n          }\n          setTimestamp(`${minutes}:${seconds}`)\n      }, [500])\n      \n      return () => {\n        clearInterval(timer);\n      };\n    }\n  }, [progress, isPlaying])\n\n\n  const setVideoProgress = () => {\n    toggleControls()\n    setProgress(videoProgressRef.current.value)\n    videoRef.current.currentTime = (videoProgressRef.current.value * videoRef.current.duration)/100\n  }\n\n  // Show/Hide controls based on mousemove\n  const toggleControls = () => {\n    setMouseMoved(true)\n    setShowControls(true)\n  }\n\n  useEffect(() => {\n    setMouseMoved(false)\n    const timer =  setTimeout(() => {\n      setShowControls(false)\n    }, 4000);\n    \n    return () => { clearTimeout(timer)}\n  }, [mouseMoved])\n\n    const toggleFullScreen =  () => {\n    videoRef.current.requestFullscreen()\n  } \n\n  return(\n      <div className='vp-container'  >\n        {/* VIDEO */}\n        <div className='video' onMouseMove={toggleControls} onClick={toggleControls}>\n          <Card onClick={togglePlay} >\n            <CardActionArea>\n              <CardMedia \n                style={showControls? null : {cursor: 'none'}}\n                ref={videoRef}\n                component=\"video\"\n                //autoPlay \n                //loop \n                type='video/mp4' \n                src={VideoKamua}\n                />\n            </CardActionArea>\n          </Card>\n          <div className='timestamp'>{timestamp}</div>\n          <div className={animation? 'displayImage' : 'hideImage'}>\n            {isPlaying? <img src={PlayImage}/>: <img src={PauseImage}/> }\n          </div>\n\n          {openedSettings?\n          (\n            <div className='speed'>\n            <div className='speed-title'>Playback Speed</div>\n            <div onClick={changePlaybackSpeed.bind(this, 0.5)}>0.5</div>\n            <div onClick={changePlaybackSpeed.bind(this, 0.75)}>0.75</div>\n            <div onClick={changePlaybackSpeed.bind(this, 1)}>Normal</div>\n            <div onClick={changePlaybackSpeed.bind(this, 1.25)}>1.25</div>\n            <div onClick={changePlaybackSpeed.bind(this, 1.5)}>1.5</div>\n          </div>\n          )\n        :\n        null }  \n        </div >\n        {/* PROGRESS BAR */}\n        <div className='progress-bar' onMouseOver={toggleControls} onClick={toggleControls}>\n          <div><input ref={videoProgressRef} type=\"range\" onChange={setVideoProgress} step=\"0.1\" min=\"0\" max=\"100\" value={progress}/></div>\n        </div>\n        {/* CONTROLS */}\n        { showControls?\n        <div className='video-controls' onMouseOver={toggleControls} onClick={toggleControls}>\n          <div className='controls-left'>\n            {isPlaying? <div onClick={togglePlay} className='volume icon'><Pause/></div> : <div onClick={togglePlay} className='icon'><PlayArrow/></div>}\n            {isMuted? <div onClick = {toggleVolume} className='icon'><VolumeOffIcon/></div>:  \n              <div onClick = {toggleVolume} className='volume icon'><VolumeUp/></div>\n            }\n            <div className='volumeProgress'>\n              <input ref={volumeProgressRef} type=\"range\" onChange={changeVolume} step=\"0.05\" min=\"0\" max=\"1\" value={progressVolume}/>\n            </div>\n          </div>\n          <div className='controls-right'>\n            <div onClick={toggleSpeedNav} className='icon'><Settings/></div>\n            <div onClick={toggleFullScreen} className='icon'><Fullscreen/></div>\n          </div>\n        </div>\n      : null\n        }\n      \n      </div>\n  )\n}\n\nexport default VideoItem","import {useState} from 'react'\nimport './App.scss'\nimport VideoItem from './components/VideoItem/VideoItem'\n\n\n\nconst App = () => {\n  const [isPlaying, setIsPlaying] = useState(false)\n  const [isMuted, setIsMuted] = useState(false)\n  const [openedSettings, setOpenedSettings] = useState(false) \n  \n\n  return(\n    <div className='main-screen'> \n      <h1 className='title'>Custom Video Player</h1>\n      <VideoItem isPlaying={isPlaying} isMuted={isMuted} openedSettings={openedSettings} setIsPlaying={setIsPlaying} setOpenedSettings={setOpenedSettings} setIsMuted={setIsMuted}/>\n    </div>\n  )\n}\n\n\nexport default App","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}